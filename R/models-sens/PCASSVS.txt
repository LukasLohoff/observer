model{
  # hierarchically pooled data model sqrt(precision)
  for(i in 1:t){
    s_inv[i] ~ dlnorm(mu_s_inv, tau2_s)                # pooling prior for data model sqrt(precision)
  }
  mu_s_inv ~ dnorm(0, 1 / 1)                         # pooled mean for data model sqrt(precision)
  tau_s ~ dunif(0, 1)                                # pooled sqrt(precision) for data model sqrt(precision)
  # mu_s_inv ~ dnorm(0, 1 / 100)                         # pooled mean for data model sqrt(precision)
  # tau_s ~ dunif(0, 100)                                # pooled sqrt(precision) for data model sqrt(precision)
  tau2_s <- pow(tau_s, 2)                              # pooled precision for data model sqrt(precision)
  
  # hierarchically pooled ssvs priors
  for(i in 1:t){
    tau_beta[i] ~ dlnorm(mu_tau_beta, tau2_tau_beta)   # regression coefficient sqrt(precision)
    tau2_beta[i] <- pow(tau_beta[i], 2)                # regression coefficient precision
    precision_beta[1, i] <- tau2_beta[i]               # regression coefficient effectively zero
    precision_beta[2, i] <- tau2_beta[i] / 1000        # nonzero coefficient
  }
  mu_tau_beta ~ dnorm(0, 1 / 1)                      # pooled mean for regression coefficient sqrt(precision)
  tau_tau_beta ~ dunif(0, 1)                         # pooled sqrt(precision) for regression coefficient sqrt(precision)
  # mu_tau_beta ~ dnorm(0, 1 / 100)                      # pooled mean for regression coefficient sqrt(precision)
  # tau_tau_beta ~ dunif(0, 100)                         # pooled sqrt(precision) for regression coefficient sqrt(precision)
  tau2_tau_beta <- pow(tau_tau_beta, 2)                # pooled precision for  regression coefficient sqrt(precision)
  p_ind[1] <- 1/2                                      # prior probability of nonzero coefficient
  p_ind[2] <- 1 - p_ind[1]                             # prior probability effectively zero coefficient

  for (j in 1:t){
    for(i in 1:p){
      indA[i, j] ~ dcat(p_ind[])                       # sample indicator for nonzero coefficient, returns 1 or 2 
      gamma[i, j] <- indA[i, j] - 1                    # transform indicator from 0-1 to 1-2 for indexing, returns 0 or 1
      beta[i, j] ~ dnorm(0, precision_beta[indA[i, j], j] / D[i])  # ssvs prior for regression coefficients
    }
  }
  
  for (i in 1:N_total){
    mu[i] <- X[H[i], ] %*% beta[, tt[i]]              # data model mean for sparse data format
                                                      # X <- PCA rotation matrix
                                                      # H <- observation indicator
    s2_y_inv[i] <- pow(s_inv[tt[i]], 2)               # data model precision for sparse data format
  }

  # likelihood
  for (i in 1:N_total){
    Y[i] ~ dnorm(mu[i], s2_y_inv[i])                 # data model for sparse data format
  }
}
